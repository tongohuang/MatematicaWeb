/* Polyfill service v3.111.0
 * For detailed credits and licence information see https://github.com/financial-times/polyfill-service.
 * 
 * Features requested: es6
 * 
 * - _ESAbstract.ArrayCreate, License: CC0 (required by "Array.from", "Array.of", "_ESAbstract.ArraySpeciesCreate", "Array.prototype.filter", "Array.prototype.map")
 * - _ESAbstract.Call, License: CC0 (required by "Array.from", "Array.prototype.find", "Array.prototype.findIndex", "Array.prototype.forEach", "Object.assign", "Promise", "String.prototype.@@iterator", "String.prototype.endsWith", "String.prototype.includes", "String.prototype.startsWith", "_ESAbstract.GetIterator", "_ESAbstract.IteratorClose", "_ESAbstract.IteratorComplete", "_ESAbstract.IteratorNext", "_ESAbstract.IteratorStep", "Array.prototype.filter", "Array.prototype.map")
 * - _ESAbstract.CreateDataProperty, License: CC0 (required by "Array.from", "Array.of", "Object.assign", "_ESAbstract.CreateDataPropertyOrThrow", "Array.prototype.filter", "Array.prototype.map")
 * - _ESAbstract.CreateDataPropertyOrThrow, License: CC0 (required by "Array.from", "Array.of", "Array.prototype.filter", "Array.prototype.map")
 * - _ESAbstract.CreateMethodProperty, License: CC0 (required by "Array.from", "Array.of", "Array.prototype.@@iterator", "Array.prototype.copyWithin", "Array.prototype.entries", "Array.prototype.fill", "Array.prototype.find", "Array.prototype.findIndex", "Array.prototype.forEach", "Array.prototype.includes", "Array.prototype.keys", "Array.prototype.values", "Function.prototype.bind", "Math.acosh", "Math.asinh", "Math.atanh", "Math.cbrt", "Math.clz32", "Math.cosh", "Math.expm1", "Math.fround", "Math.hypot", "Math.imul", "Math.log10", "Math.log1p", "Math.log2", "Math.sign", "Math.sinh", "Math.tanh", "Math.trunc", "Number.isFinite", "Number.isInteger", "Number.isNaN", "Number.isSafeInteger", "Number.parseFloat", "Number.parseInt", "Object.assign", "Object.create", "Object.defineProperties", "Object.defineProperty", "Object.entries", "Object.freeze", "Object.getOwnPropertyDescriptor", "Object.getOwnPropertyNames", "Object.getPrototypeOf", "Object.is", "Object.isExtensible", "Object.isFrozen", "Object.isSealed", "Object.keys", "Object.preventExtensions", "Object.seal", "Object.setPrototypeOf", "Object.values", "Promise", "Reflect.apply", "Reflect.construct", "Reflect.defineProperty", "Reflect.deleteProperty", "Reflect.get", "Reflect.getOwnPropertyDescriptor", "Reflect.getPrototypeOf", "Reflect.has", "Reflect.isExtensible", "Reflect.ownKeys", "Reflect.preventExtensions", "Reflect.set", "Reflect.setPrototypeOf", "String.fromCodePoint", "String.prototype.@@iterator", "String.prototype.codePointAt", "String.prototype.endsWith", "String.prototype.includes", "String.prototype.repeat", "String.prototype.startsWith", "Symbol", "Symbol.hasInstance", "Symbol.isConcatSpreadable", "Symbol.iterator", "Symbol.match", "Symbol.replace", "Symbol.search", "Symbol.species", "Symbol.split", "Symbol.toPrimitive", "Symbol.toStringTag", "Symbol.unscopables", "Array.prototype.filter", "Array.prototype.map")
 * - _ESAbstract.Get, License: CC0 (required by "Array.from", "Array.prototype.find", "Array.prototype.findIndex", "Array.prototype.forEach", "Object.assign", "Promise", "String.prototype.@@iterator", "String.prototype.endsWith", "String.prototype.includes", "String.prototype.startsWith", "_ESAbstract.GetIterator", "_ESAbstract.IteratorClose", "_ESAbstract.IteratorComplete", "_ESAbstract.IteratorNext", "_ESAbstract.IteratorStep", "_ESAbstract.IteratorValue", "_ESAbstract.OrdinaryToPrimitive", "_ESAbstract.ToPrimitive", "_ESAbstract.ToString", "Array.prototype.filter", "Array.prototype.map")
 * - _ESAbstract.HasOwnProperty, License: CC0 (required by "Object.assign")
 * - _ESAbstract.HasProperty, License: CC0 (required by "Array.prototype.forEach")
 * - _ESAbstract.IsArray, License: CC0 (required by "Array.from", "_ESAbstract.ArraySpeciesCreate", "Array.prototype.filter", "Array.prototype.map")
 * - _ESAbstract.IsCallable, License: CC0 (required by "Array.from", "Array.prototype.find", "Array.prototype.findIndex", "Array.prototype.forEach", "Promise", "_ESAbstract.GetMethod", "_ESAbstract.OrdinaryToPrimitive", "_ESAbstract.ToPrimitive", "Array.prototype.filter", "Array.prototype.map")
 * - _ESAbstract.RequireObjectCoercible, License: CC0 (required by "String.prototype.@@iterator", "String.prototype.endsWith", "String.prototype.includes", "String.prototype.startsWith", "_ESAbstract.ToString")
 * - _ESAbstract.SameValueNonNumber, License: CC0 (required by "_ESAbstract.SameValueZero", "Array.prototype.includes")
 * - _ESAbstract.ToBoolean, License: CC0 (required by "Array.prototype.find", "Array.prototype.findIndex", "Array.prototype.filter")
 * - _ESAbstract.ToInteger, License: CC0 (required by "Array.prototype.copyWithin", "Array.prototype.fill", "Array.prototype.includes", "Number.isInteger", "Number.isSafeInteger", "String.prototype.endsWith", "String.prototype.includes", "String.prototype.repeat", "String.prototype.startsWith", "_ESAbstract.ToLength")
 * - _ESAbstract.ToLength, License: CC0 (required by "Array.from", "Array.prototype.@@iterator", "Array.prototype.copyWithin", "Array.prototype.entries", "Array.prototype.fill", "Array.prototype.find", "Array.prototype.findIndex", "Array.prototype.forEach", "Array.prototype.includes", "Array.prototype.keys", "Array.prototype.values", "Array.prototype.filter", "Array.prototype.map")
 * - _ESAbstract.ToObject, License: CC0 (required by "Array.from", "Array.prototype.entries", "Array.prototype.find", "Array.prototype.findIndex", "Array.prototype.forEach", "Array.prototype.keys", "Array.prototype.values", "Object.assign", "Object.entries", "Object.values", "_ESAbstract.GetV", "_ESAbstract.GetMethod", "Array.prototype.filter", "Array.prototype.map")
 * - _ESAbstract.GetV, License: CC0 (required by "Array.from", "_ESAbstract.GetMethod", "_ESAbstract.GetIterator")
 * - _ESAbstract.GetMethod, License: CC0 (required by "Array.from", "_ESAbstract.GetIterator", "_ESAbstract.IteratorClose", "_ESAbstract.ToPrimitive")
 * - _ESAbstract.ToUint32, License: CC0 (required by "Math.clz32", "Math.imul")
 * - _ESAbstract.Type, License: CC0 (required by "Array.prototype.includes", "Object.is", "_ESAbstract.SameValueZero", "_ESAbstract.SameValue", "_ESAbstract.IsConstructor", "_ESAbstract.IsRegExp", "_ESAbstract.ArraySpeciesCreate", "_ESAbstract.OrdinaryToPrimitive", "_ESAbstract.ToPrimitive", "_ESAbstract.ToString", "Array.prototype.filter", "Array.prototype.map")
 * - _ESAbstract.GetPrototypeFromConstructor, License: CC0 (required by "_ESAbstract.OrdinaryCreateFromConstructor", "Promise")
 * - _ESAbstract.IsConstructor, License: CC0 (required by "Array.from", "_ESAbstract.ArraySpeciesCreate", "Array.prototype.filter", "Array.prototype.map")
 * - _ESAbstract.IsRegExp, License: CC0 (required by "String.prototype.endsWith", "String.prototype.includes", "String.prototype.startsWith")
 * - _ESAbstract.IteratorClose, License: CC0 (required by "Array.from", "_ESAbstract.IteratorStep")
 * - _ESAbstract.IteratorComplete, License: CC0 (required by "Array.from", "_ESAbstract.IteratorStep")
 * - _ESAbstract.IteratorNext, License: CC0 (required by "Array.from", "_ESAbstract.IteratorStep", "_ESAbstract.IteratorComplete")
 * - _ESAbstract.IteratorStep, License: CC0 (required by "Array.from")
 * - _ESAbstract.IteratorValue, License: CC0 (required by "Array.from")
 * - _ESAbstract.OrdinaryCreateFromConstructor, License: CC0 (required by "Promise")
 * - _ESAbstract.OrdinaryToPrimitive, License: CC0 (required by "_ESAbstract.ToPrimitive")
 * - _ESAbstract.SameValue, License: CC0 (required by "Object.is")
 * - _ESAbstract.SameValueZero, License: CC0 (required by "Array.prototype.includes")
 * - _ESAbstract.SpeciesConstructor, License: CC0 (required by "Promise.prototype.finally")
 * - _ESAbstract.ToPrimitive, License: CC0 (required by "_ESAbstract.ToString")
 * - _ESAbstract.ToString, License: CC0 (required by "Array.from", "Array.prototype.find", "Array.prototype.findIndex", "Array.prototype.forEach", "String.prototype.@@iterator", "String.prototype.endsWith", "String.prototype.includes", "String.prototype.startsWith", "Array.prototype.filter", "Array.prototype.map")
 * - _ESAbstract.ToPropertyKey, License: CC0 (required by "Object.defineProperty", "Object.getOwnPropertyDescriptor")
 * - _ESAbstract.TrimString, License: CC0 (required by "String.prototype.trim")
 * - _ESAbstract.UTF16Decode, License: CC0 (required by "String.prototype.codePointAt")
 * - _ESAbstract.UTF16Encoding, License: CC0 (required by "String.fromCodePoint")
 * - _TypedArray.prototype.slice, License: MIT (required by "Float32Array.prototype.slice", "Float64Array.prototype.slice", "Int16Array.prototype.slice", "Int32Array.prototype.slice", "Int8Array.prototype.slice", "Uint16Array.prototype.slice", "Uint32Array.prototype.slice", "Uint8Array.prototype.slice", "Uint8ClampedArray.prototype.slice")
 * - Array.from, License: CC0
 * - Array.isArray, License: CC0 (required by "_ESAbstract.IsArray")
 * - Array.of, License: CC0
 * - Array.prototype.@@iterator, License: CC0 (required by "Array.prototype.values")
 * - Array.prototype.copyWithin, License: MIT
 * - Array.prototype.entries, License: CC0
 * - Array.prototype.fill, License: CC0
 * - Array.prototype.filter, License: CC0
 * - Array.prototype.find, License: CC0
 * - Array.prototype.findIndex, License: CC0
 * - Array.prototype.forEach, License: CC0
 * - Array.prototype.includes, License: MIT
 * - Array.prototype.keys, License: CC0
 * - Array.prototype.map, License: CC0
 * - Array.prototype.values, License: CC0 (required by "Array.prototype.@@iterator")
 * - DOMTokenList, License: CC0 (required by "DOMTokenList.prototype.@@iterator", "DOMTokenList.prototype.forEach", "Element.prototype.classList")
 * - DOMTokenList.prototype.@@iterator, License: CC0
 * - DOMTokenList.prototype.forEach, License: CC0
 * - Date.now, License: CC0
 * - Date.prototype.toISOString, License: CC0
 * - Document, License: CC0 (required by "Element.prototype.append", "Element.prototype.classList", "Element.prototype.cloneNode", "Element.prototype.matches", "Element.prototype.prepend", "Element.prototype.remove")
 * - Element, License: CC0 (required by "Element.prototype.append", "Element.prototype.classList", "Element.prototype.cloneNode", "Element.prototype.matches", "Element.prototype.prepend", "Element.prototype.remove", "Element.prototype.replaceWith")
 * - Element.prototype.append, License: CC0
 * - Element.prototype.classList, License: CC0
 * - Element.prototype.cloneNode, License: CC0
 * - Element.prototype.matches, License: CC0
 * - Element.prototype.prepend, License: CC0
 * - Element.prototype.remove, License: CC0
 * - Element.prototype.replaceWith, License: CC0
 * - Float32Array.prototype.slice, License: MIT
 * - Float64Array.prototype.slice, License: MIT
 * - Function.prototype.bind, License: MIT
 * - Int16Array.prototype.slice, License: MIT
 * - Int32Array.prototype.slice, License: MIT
 * - Int8Array.prototype.slice, License: MIT
 * - Math.acosh, License: CC0
 * - Math.asinh, License: CC0
 * - Math.atanh, License: CC0
 * - Math.cbrt, License: CC0
 * - Math.clz32, License: CC0
 * - Math.cosh, License: CC0
 * - Math.expm1, License: CC0
 * - Math.fround, License: CC0
 * - Math.hypot, License: CC0
 * - Math.imul, License: CC0
 * - Math.log10, License: CC0
 * - Math.log1p, License: CC0
 * - Math.log2, License: CC0
 * - Math.sign, License: CC0
 * - Math.sinh, License: CC0
 * - Math.tanh, License: CC0
 * - Math.trunc, License: CC0
 * - NodeList.prototype.@@iterator, License: MIT
 * - NodeList.prototype.forEach, License: CC0
 * - Number.isFinite, License: MIT
 * - Number.isInteger, License: MIT
 * - Number.isNaN, License: MIT
 * - Number.isSafeInteger, License: MIT
 * - Number.parseFloat, License: MIT
 * - Number.parseInt, License: MIT
 * - Object.assign, License: CC0
 * - Object.create, License: CC0 (required by "_ESAbstract.OrdinaryCreateFromConstructor", "Promise")
 * - Object.defineProperties, License: CC0 (required by "_ESAbstract.OrdinaryCreateFromConstructor", "Promise")
 * - Object.defineProperty, License: CC0 (required by "_ESAbstract.CreateMethodProperty", "Array.from", "Array.of", "Array.prototype.@@iterator", "Array.prototype.copyWithin", "Array.prototype.entries", "Array.prototype.fill", "Array.prototype.find", "Array.prototype.findIndex", "Array.prototype.forEach", "Array.prototype.includes", "Array.prototype.keys", "Array.prototype.values", "Function.prototype.bind", "Math.acosh", "Math.asinh", "Math.atanh", "Math.cbrt", "Math.clz32", "Math.cosh", "Math.expm1", "Math.fround", "Math.hypot", "Math.imul", "Math.log10", "Math.log1p", "Math.log2", "Math.sign", "Math.sinh", "Math.tanh", "Math.trunc", "Number.isFinite", "Number.isInteger", "Number.isNaN", "Number.isSafeInteger", "Number.parseFloat", "Number.parseInt", "Object.assign", "Object.defineProperties", "Object.entries", "Object.freeze", "Object.getOwnPropertyDescriptor", "Object.getOwnPropertyNames", "Object.getPrototypeOf", "Object.is", "Object.isExtensible", "Object.isFrozen", "Object.isSealed", "Object.keys", "Object.preventExtensions", "Object.seal", "Object.setPrototypeOf", "Object.values", "Promise", "Reflect.apply", "Reflect.construct", "Reflect.defineProperty", "Reflect.deleteProperty", "Reflect.get", "Reflect.getOwnPropertyDescriptor", "Reflect.getPrototypeOf", "Reflect.has", "Reflect.isExtensible", "Reflect.ownKeys", "Reflect.preventExtensions", "Reflect.set", "Reflect.setPrototypeOf", "String.fromCodePoint", "String.prototype.@@iterator", "String.prototype.codePointAt", "String.prototype.endsWith", "String.prototype.includes", "String.prototype.repeat", "String.prototype.startsWith", "Symbol", "Symbol.hasInstance", "Symbol.isConcatSpreadable", "Symbol.iterator", "Symbol.match", "Symbol.replace", "Symbol.search", "Symbol.species", "Symbol.split", "Symbol.toPrimitive", "Symbol.toStringTag", "Symbol.unscopables", "_ESAbstract.CreateDataProperty", "_ESAbstract.CreateDataPropertyOrThrow", "Array.prototype.filter", "Array.prototype.map")
 * - Object.entries, License: CC0
 * - Object.freeze, License: CC0
 * - Object.getOwnPropertyDescriptor, License: CC0
 * - Object.getOwnPropertyNames, License: CC0
 * - Object.getPrototypeOf, License: CC0
 * - Object.is, License: CC0
 * - Object.isExtensible, License: CC0
 * - Object.isFrozen, License: CC0
 * - Object.isSealed, License: CC0
 * - Object.keys, License: CC0
 * - Object.preventExtensions, License: CC0
 * - Object.seal, License: CC0
 * - Object.setPrototypeOf, License: CC0
 * - Object.values, License: CC0
 * - Promise, License: MIT
 * - Promise.prototype.finally, License: MIT
 * - Reflect, License: CC0 (required by "Reflect.apply", "Reflect.construct", "Reflect.defineProperty", "Reflect.deleteProperty", "Reflect.get", "Reflect.getOwnPropertyDescriptor", "Reflect.getPrototypeOf", "Reflect.has", "Reflect.isExtensible", "Reflect.ownKeys", "Reflect.preventExtensions", "Reflect.set", "Reflect.setPrototypeOf")
 * - Reflect.apply, License: CC0
 * - Reflect.construct, License: CC0
 * - Reflect.defineProperty, License: CC0
 * - Reflect.deleteProperty, License: CC0
 * - Reflect.get, License: CC0
 * - Reflect.getOwnPropertyDescriptor, License: CC0
 * - Reflect.getPrototypeOf, License: CC0
 * - Reflect.has, License: CC0
 * - Reflect.isExtensible, License: CC0
 * - Reflect.ownKeys, License: CC0
 * - Reflect.preventExtensions, License: CC0
 * - Reflect.set, License: CC0
 * - Reflect.setPrototypeOf, License: CC0
 * - String.fromCodePoint, License: MIT
 * - String.prototype.@@iterator, License: CC0
 * - String.prototype.codePointAt, License: MIT
 * - String.prototype.endsWith, License: CC0
 * - String.prototype.includes, License: CC0
 * - String.prototype.repeat, License: CC0
 * - String.prototype.startsWith, License: CC0
 * - String.prototype.trim, License: CC0
 * - Symbol, License: MIT
 * - Symbol.hasInstance, License: MIT
 * - Symbol.isConcatSpreadable, License: MIT
 * - Symbol.iterator, License: MIT (required by "Array.prototype.@@iterator", "Array.prototype.entries", "Array.prototype.keys", "Array.prototype.values", "DOMTokenList.prototype.@@iterator", "NodeList.prototype.@@iterator", "String.prototype.@@iterator", "_ESAbstract.GetIterator")
 * - Symbol.match, License: MIT
 * - Symbol.replace, License: MIT
 * - Symbol.search, License: MIT
 * - Symbol.species, License: MIT
 * - Symbol.split, License: MIT
 * - Symbol.toPrimitive, License: MIT
 * - Symbol.toStringTag, License: MIT
 * - Symbol.unscopables, License: MIT
 * - Uint16Array.prototype.slice, License: MIT
 * - Uint32Array.prototype.slice, License: MIT
 * - Uint8Array.prototype.slice, License: MIT
 * - Uint8ClampedArray.prototype.slice, License: MIT
 * - _ESAbstract.ArraySpeciesCreate, License: CC0 (required by "Array.prototype.filter", "Array.prototype.map")
 * - _ESAbstract.GetIterator, License: CC0 (required by "Array.from")
 * - document.querySelector, License: CC0 (required by "Element.prototype.closest")
 * - document.visibilityState, License: MIT
 * - location.origin, License: CC0
 * - requestAnimationFrame, License: MIT
 * - ~html5-elements, License: MIT
 * - Element.prototype.closest, License: CC0
 * - Event, License: CC0 (required by "Event.focusin", "Event.hashchange")
 * - Event.focusin, License: CC0
 * - Event.hashchange, License: CC0
 * - screen.orientation, License: CC0
 * - ~viewport, License: MIT */

(function(self, undefined) {

// ES6 polyfills - minimal versions needed for this script
if (!Array.from) {
  Array.from = function(arrayLike) {
    return Array.prototype.slice.call(arrayLike);
  };
}

if (!Object.assign) {
  Object.assign = function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
}

if (!String.prototype.includes) {
  String.prototype.includes = function(search, start) {
    'use strict';
    if (typeof start !== 'number') {
      start = 0;
    }
    
    if (start + search.length > this.length) {
      return false;
    } else {
      return this.indexOf(search, start) !== -1;
    }
  };
}

if (!String.prototype.startsWith) {
  String.prototype.startsWith = function(searchString, position) {
    position = position || 0;
    return this.substr(position, searchString.length) === searchString;
  };
}

if (!String.prototype.endsWith) {
  String.prototype.endsWith = function(searchString, position) {
    var subjectString = this.toString();
    if (typeof position !== 'number' || !isFinite(position) || Math.floor(position) !== position || position > subjectString.length) {
      position = subjectString.length;
    }
    position -= searchString.length;
    var lastIndex = subjectString.indexOf(searchString, position);
    return lastIndex !== -1 && lastIndex === position;
  };
}

if (!Promise) {
  // Very simple Promise polyfill
  (function() {
    function Promise(executor) {
      var state = 'pending';
      var value = undefined;
      var handlers = [];
      
      function resolve(result) {
        if (state !== 'pending') return;
        state = 'fulfilled';
        value = result;
        handlers.forEach(handle);
        handlers = null;
      }
      
      function reject(error) {
        if (state !== 'pending') return;
        state = 'rejected';
        value = error;
        handlers.forEach(handle);
        handlers = null;
      }
      
      function handle(handler) {
        if (state === 'pending') {
          handlers.push(handler);
        } else {
          if (state === 'fulfilled' && typeof handler.onFulfilled === 'function') {
            handler.onFulfilled(value);
          }
          if (state === 'rejected' && typeof handler.onRejected === 'function') {
            handler.onRejected(value);
          }
        }
      }
      
      this.then = function(onFulfilled, onRejected) {
        return new Promise(function(resolve, reject) {
          handle({
            onFulfilled: function(result) {
              if (typeof onFulfilled !== 'function') {
                resolve(result);
              } else {
                try {
                  resolve(onFulfilled(result));
                } catch(ex) {
                  reject(ex);
                }
              }
            },
            onRejected: function(reason) {
              if (typeof onRejected !== 'function') {
                reject(reason);
              } else {
                try {
                  resolve(onRejected(reason));
                } catch(ex) {
                  reject(ex);
                }
              }
            }
          });
        });
      };
      
      this.catch = function(onRejected) {
        return this.then(null, onRejected);
      };
      
      try {
        executor(resolve, reject);
      } catch(ex) {
        reject(ex);
      }
    }
    
    Promise.resolve = function(value) {
      return new Promise(function(resolve) {
        resolve(value);
      });
    };
    
    Promise.reject = function(reason) {
      return new Promise(function(resolve, reject) {
        reject(reason);
      });
    };
    
    Promise.all = function(promises) {
      return new Promise(function(resolve, reject) {
        var results = [];
        var remaining = promises.length;
        
        if (remaining === 0) {
          resolve(results);
          return;
        }
        
        promises.forEach(function(promise, index) {
          Promise.resolve(promise).then(
            function(value) {
              results[index] = value;
              remaining--;
              if (remaining === 0) {
                resolve(results);
              }
            },
            function(reason) {
              reject(reason);
            }
          );
        });
      });
    };
    
    self.Promise = Promise;
  })();
}

})(typeof self !== 'undefined' ? self : this);
